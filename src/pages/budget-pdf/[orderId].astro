---
import { getServerUser, getServerUserProfile } from '../../lib/supabase';

let { orderId } = Astro.params;

if (!orderId) {
  return new Response('Order ID is required', { status: 400 });
}

// Remove .pdf extension if present
if (orderId.endsWith('.pdf')) {
  orderId = orderId.replace('.pdf', '');
}

// Check if it's an internal API request
const isInternalRequest = Astro.request.headers.get('X-Internal-Request') === 'true';
const requestedOrderIdFromHeader = Astro.request.headers.get('X-Requested-Order-Id');

if (isInternalRequest) {
  // Validate internal request
  if (requestedOrderIdFromHeader !== orderId) {
    console.error(`Internal request orderId mismatch: header=${requestedOrderIdFromHeader}, param=${orderId}`);
    return new Response('Internal request validation failed', { status: 400 });
  }
  console.log('✅ Internal request validated for orderId:', orderId);
} else {
  // For direct requests, verify authentication using server-side method
  const user = await getServerUser(Astro);
  
  if (!user) {
    console.log('No authenticated user found');
    return Astro.redirect('/login');
  }

  // Get current user profile for authorization
  console.log('🔍 Getting current user profile for authorization...');
  console.log('🔍 Current user from getServerUser:', { id: user.id, email: user.email });
  console.log('🔍 Requested orderId:', orderId);
  
  const currentUserProfile = await getServerUserProfile(Astro);
  console.log('🔍 Current user profile result:', {
    hasProfile: !!currentUserProfile,
    hasProfileData: !!currentUserProfile?.profile,
    profileUserId: currentUserProfile?.profile?.user_id,
    profileAuthUid: currentUserProfile?.profile?.auth_uid
  });
  
  if (!currentUserProfile || !currentUserProfile.profile) {
    console.error('❌ No user profile found for current user');
    return new Response('User profile not found', { status: 404 });
  }
}

// Get order data
let orderData;
try {
  if (isInternalRequest) {
    // For internal requests, use service role key to get order data directly
    console.log('🔧 Internal request: fetching order data with service role key');
    const { createClient } = await import('@supabase/supabase-js');
    const serviceSupabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL!,
      import.meta.env.SUPABASE_SERVICE_ROLE_KEY || import.meta.env.PUBLIC_SUPABASE_ANON_KEY!
    );
    
    const { data: order, error } = await serviceSupabase
      .from('orders')
      .select('*')
      .eq('id', parseInt(orderId))
      .single();
    
    if (error || !order) {
      console.error('Error fetching order data for internal request:', error);
      return new Response('Order not found', { status: 404 });
    }
    
    orderData = order;
    console.log('✅ Internal request: order data fetched successfully');
  } else {
    // For regular requests, use the server method with authorization check
    const { createClient } = await import('@supabase/supabase-js');
    const supabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL!,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY!
    );
    
    const { data: order, error } = await supabase
      .from('orders')
      .select('*')
      .eq('id', parseInt(orderId))
      .single();
      
    if (error || !order) {
      console.error('Error fetching order data:', error);
      return new Response('Order not found', { status: 404 });
    }
    
    // Verify user can only access their own orders
    const currentUserProfile = await getServerUserProfile(Astro);
    if (!currentUserProfile?.profile) {
      return new Response('User profile not found', { status: 404 });
    }
    
    // Check if the order belongs to the current user
    const userMatches = order.customer_id === currentUserProfile.profile.user_id?.toString() ||
                       order.customer_id === currentUserProfile.profile.auth_uid ||
                       order.customer_id === currentUserProfile.auth?.id;
    
    if (!userMatches) {
      console.warn(`❌ Unauthorized access attempt to order ${orderId} by user ${currentUserProfile.profile.user_id}`);
      return Astro.redirect('/404');
    }
    
    orderData = order;
  }
} catch (error) {
  console.error('Error fetching order data:', error);
  return new Response('Error fetching order data', { status: 500 });
}

// Set security headers
Astro.response.headers.set('X-Frame-Options', 'DENY');
Astro.response.headers.set('X-Content-Type-Options', 'nosniff');
Astro.response.headers.set('Cache-Control', 'private, no-cache, no-store, must-revalidate');

// Generate current date
const currentDate = new Date().toLocaleDateString('es-CL', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Parse order data with fallbacks for all column formats
const billing = orderData.billing || {};
const metadata = orderData.metadata || {};
const lineItems = orderData.line_items || [];
const couponLines = orderData.coupon_lines || [];
const shippingLines = orderData.shipping_lines || [];

// Extract data with fallbacks (supports both nested and flat structures)
const customerFirstName = billing.first_name || orderData.billing_first_name || '';
const customerLastName = billing.last_name || orderData.billing_last_name || '';
const customerCompany = billing.company || orderData.billing_company || '';
const customerEmail = billing.email || orderData.billing_email || '';
const customerPhone = billing.phone || orderData.billing_phone || '';
const customerAddress = billing.address_1 || orderData.billing_address_1 || '';
const customerCity = billing.city || orderData.billing_city || '';
const customerRut = billing.rut || orderData.billing_rut || '';

// Project information with fallbacks
const projectName = metadata.order_proyecto || orderData.order_proyecto || 'Proyecto de Arriendo';
const startDate = metadata.order_fecha_inicio || orderData.order_fecha_inicio || '';
const endDate = metadata.order_fecha_termino || orderData.order_fecha_termino || '';
const numJornadas = parseInt(metadata.num_jornadas || orderData.num_jornadas || '1');
const companyRut = metadata.company_rut || orderData.company_rut || '';

// Additional order information (for future use)
const retireName = metadata.order_retire_name || orderData.order_retire_name || '';
const retirePhone = metadata.order_retire_phone || orderData.order_retire_phone || '';
const retireRut = metadata.order_retire_rut || orderData.order_retire_rut || '';
const comments = metadata.order_comments || orderData.order_comments || '';

// Calculate totals with fallbacks
const subtotal = parseFloat(metadata.calculated_subtotal || orderData.calculated_subtotal || '0');
const discount = parseFloat(metadata.calculated_discount || orderData.calculated_discount || '0');
const iva = parseFloat(metadata.calculated_iva || orderData.calculated_iva || '0');
const total = parseFloat(metadata.calculated_total || orderData.calculated_total || '0');
const reserve = total * 0.25;

// Function to translate order status to Spanish
const getOrderStatusInSpanish = (status: string) => {
  const statusMap: { [key: string]: string } = {
    'pending': 'Pendiente',
    'processing': 'En Proceso',
    'on-hold': 'En Espera',
    'completed': 'Completado',
    'cancelled': 'Cancelado',
    'refunded': 'Reembolsado',
    'failed': 'Fallido',
    'draft': 'Borrador',
    'trash': 'Eliminado',
  };
  
  return statusMap[status] || status.charAt(0).toUpperCase() + status.slice(1);
};

// Additional order information
const orderIdNum = orderData.id || orderData.order_id;
const orderStatus = getOrderStatusInSpanish(orderData.status || 'on-hold');
const paymentMethod = orderData.payment_method || orderData.payment_method_title || 'Por definir';

// Process shipping information
let shippingInfo = null;
if (shippingLines && shippingLines.length > 0) {
  const shippingLine = shippingLines[0]; // Get first shipping method
  const shippingMetadata = shippingLine.meta_data || {};
  
  shippingInfo = {
    method_title: shippingLine.method_title || 'Método de envío',
    method_type: shippingLine.method_type || '',
    total: parseFloat(shippingLine.total || '0'),
    delivery_method: shippingMetadata.delivery_method || '',
    estimated_delivery: shippingMetadata.estimated_delivery || '',
    tracking_number: shippingMetadata.tracking_number || null
  };
}

// Format currency
const formatCLP = (amount: number) => {
  return new Intl.NumberFormat('es-CL', { 
    style: 'currency', 
    currency: 'CLP',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
};

// Generate budget number
const budgetNumber = `PRES-${orderIdNum}-${Date.now().toString().slice(-6)}`;
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Presupuesto de Arriendo - {customerFirstName} {customerLastName}</title>
  <style>
    @page {
      size: A4;
      margin: 20mm;
    }
    
    body {
      font-family: Arial, sans-serif;
      font-size: 12px;
      line-height: 1.4;
      margin: 0;
      padding: 0;
      color: #333;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 30px;
      border-bottom: 2px solid #000;
      padding-bottom: 15px;
    }
    
    .logo {
      width: 120px;
    }
    
    .document-title {
      text-align: center;
      flex-grow: 1;
    }
    
    .document-title h1 {
      font-size: 18px;
      font-weight: bold;
      margin: 0;
      text-transform: uppercase;
    }
    
    .order-info {
      text-align: right;
      min-width: 150px;
    }
    
    .order-info h2 {
      font-size: 14px;
      margin: 0 0 5px 0;
      font-weight: bold;
    }
    
    .order-info p {
      margin: 2px 0;
      font-size: 11px;
    }
    
    .customer-info {
      display: flex;
      justify-content: space-between;
      margin-bottom: 25px;
    }
    
    .customer-details, .project-details {
      width: 48%;
    }
    
    .customer-details h3, .project-details h3 {
      font-size: 13px;
      font-weight: bold;
      margin: 0 0 10px 0;
      text-transform: uppercase;
      border-bottom: 1px solid #ccc;
      padding-bottom: 3px;
    }
    
    .customer-details p, .project-details p {
      margin: 3px 0;
      font-size: 11px;
    }
    
    .shipping-info {
      margin-bottom: 25px;
      padding: 15px;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      border-radius: 4px;
    }
    
    .shipping-info h3 {
      font-size: 13px;
      font-weight: bold;
      margin: 0 0 10px 0;
      text-transform: uppercase;
      border-bottom: 1px solid #ccc;
      padding-bottom: 3px;
      color: #495057;
    }
    
    .shipping-details p {
      margin: 5px 0;
      font-size: 11px;
      color: #495057;
    }
    
    .items-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 20px;
    }
    
    .items-table th {
      background-color: #f5f5f5;
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
      font-size: 11px;
      font-weight: bold;
      text-transform: uppercase;
    }
    
    .items-table td {
      border: 1px solid #ddd;
      padding: 6px 8px;
      font-size: 11px;
    }
    
    .items-table .text-right {
      text-align: right;
    }
    
    .items-table .text-center {
      text-align: center;
    }
    
    .totals-section {
      display: flex;
      justify-content: flex-end;
      margin-bottom: 30px;
    }
    
    .totals-table {
      width: 300px;
      border-collapse: collapse;
    }
    
    .totals-table td {
      padding: 5px 10px;
      font-size: 11px;
      border-bottom: 1px solid #eee;
    }
    
    .totals-table .label {
      text-align: right;
      font-weight: bold;
      width: 60%;
    }
    
    .totals-table .amount {
      text-align: right;
      width: 40%;
    }
    
    .totals-table .total-row {
      border-top: 2px solid #000;
      border-bottom: 2px solid #000;
      font-weight: bold;
      font-size: 12px;
    }
    
    .reserve-section {
      background-color: #f9f9f9;
      padding: 15px;
      margin-bottom: 20px;
      border: 1px solid #ddd;
    }
    
    .reserve-section h3 {
      margin: 0 0 10px 0;
      font-size: 13px;
      font-weight: bold;
      text-transform: uppercase;
    }
    
    .shipping-summary {
      margin-top: 15px;
      padding-top: 10px;
      border-top: 1px solid #ddd;
    }
    
    .shipping-summary p {
      margin: 3px 0;
      font-size: 11px;
    }
    
    .terms-section {
      margin-top: 30px;
      font-size: 10px;
      line-height: 1.3;
    }
    
    .terms-section h3 {
      font-size: 12px;
      font-weight: bold;
      margin: 15px 0 8px 0;
      text-transform: uppercase;
    }
    
    .terms-section p, .terms-section ul {
      margin: 5px 0;
    }
    
    .terms-section ul {
      padding-left: 20px;
    }
    
    .footer-info {
      margin-top: 40px;
      padding-top: 15px;
      border-top: 1px solid #ccc;
      font-size: 10px;
      text-align: center;
    }
    
    .company-footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 20px;
      padding: 15px;
      background-color: #f5f5f5;
    }
    
    .company-footer .logo-footer {
      width: 80px;
    }
    
    .company-footer .contact-info {
      text-align: right;
      font-size: 10px;
    }
  </style>
</head>
<body>
  <!-- Header Section -->
  <div class="header">
    <div class="logo">
      <img src="https://clients-rental-mhans.vercel.app/logo.png" alt="Rental Mhans" class="logo">
    </div>
    <div class="document-title">
      
    </div>
    <div class="order-info">
      <h2>Pedido #{orderIdNum}</h2>
      <p><strong>Fecha:</strong> {currentDate}</p>
      <p><strong>Estado:</strong> {orderStatus}</p>
    </div>
  </div>

  <!-- Customer and Project Information -->
  <div class="customer-info">
    <div class="customer-details">
      <h3>Datos del Cliente</h3>
      <p><strong>Nombre:</strong> {customerFirstName} {customerLastName}</p>
      {customerCompany && <p><strong>Empresa:</strong> {customerCompany}</p>}
      <p><strong>RUT:</strong> {customerRut}</p>
      <p><strong>Email:</strong> {customerEmail}</p>
      <p><strong>Teléfono:</strong> {customerPhone}</p>
      <p><strong>Dirección:</strong> {customerAddress}</p>
      <p><strong>Ciudad:</strong> {customerCity}</p>
      {companyRut && <p><strong>RUT Empresa:</strong> {companyRut}</p>}
    </div>
    
    <div class="project-details">
      <h3>Información del Proyecto</h3>
      <p><strong>Proyecto:</strong> {projectName}</p>
      <p><strong>Fecha Inicio:</strong> {startDate}</p>
      <p><strong>Fecha Término:</strong> {endDate}</p>
      <p><strong>Número de Jornadas:</strong> {numJornadas}</p>

      <p><strong>Retira:</strong> {retireName}</p>
      <p><strong>Teléfono Retiro:</strong> {retirePhone}</p>
      <p><strong>RUT Retiro:</strong> {retireRut}</p>
      <p><strong>Comentarios:</strong> {comments}</p>

    </div>
  </div>

  <!-- Items Table -->
  <table class="items-table">
    <thead>
      <tr>
        <th style="width: 40%">ITEM</th>
        <th style="width: 10%" class="text-right">Valor Diario.</th>
        <th style="width: 10%" class="text-right">Cantidad</th>
        <th style="width: 10%" class="text-right">Jornadas</th>
        <th style="width: 10%" class="text-right">NETO</th>
        <th style="width: 10%" class="text-right">IVA 19%</th>
        <th style="width: 10%" class="text-right">TOTAL BRUTO</th>
      </tr>
    </thead>
    <tbody>
      <!-- Line Items will be inserted here dynamically -->
      {lineItems.map(item => (
        <tr>
          <td>{item.name}</td>
          <td class="text-right">{formatCLP(item.price)}</td>
          <td class="text-right">{item.quantity}</td>
          <td class="text-right">{numJornadas}</td>
          <td class="text-right">{formatCLP(item.price * item.quantity * numJornadas)}</td>
          <td class="text-right">{formatCLP((item.price * item.quantity * numJornadas) * 0.19)}</td>
          <td class="text-right">{formatCLP((item.price * item.quantity * numJornadas) * 1.19)}</td>
        </tr>
      ))}
      
      <!-- Coupon Lines (if any) -->
      {couponLines.length > 0 && couponLines.map(coupon => (
        <tr>
          <td colspan="4"><strong>Descuento: {coupon.code}</strong></td>
          <td class="text-right">-{formatCLP(coupon.discount)}</td>
          <td class="text-right"></td>
          <td class="text-right">-{formatCLP(coupon.discount)}</td>
        </tr>
      ))}
      
      <!-- Shipping Line (if any) -->
      {shippingInfo && (
        <tr>
          <td colspan="4">
            <strong>{shippingInfo.method_title}</strong>
            {shippingInfo.delivery_method && (
              <span> - {shippingInfo.delivery_method === 'pickup' ? 'Retiro en Tienda' : 'Envío a Domicilio'}</span>
            )}
            {shippingInfo.estimated_delivery && (
              <span> ({shippingInfo.estimated_delivery})</span>
            )}
          </td>
          <td class="text-right">{shippingInfo.total > 0 ? formatCLP(shippingInfo.total) : '$0'}</td>
          <td class="text-right">{shippingInfo.total > 0 ? formatCLP(shippingInfo.total * 0.19) : '$0'}</td>
          <td class="text-right">{shippingInfo.total > 0 ? formatCLP(shippingInfo.total * 1.19) : '$0'}</td>
        </tr>
      )}

      
    </tbody>
  </table>

  <!-- Totals Section -->
  <div class="totals-section">
    <table class="totals-table">
      <tr>
        <td class="label">Subtotal:</td>
        <td class="amount">{formatCLP(subtotal)}</td>
      </tr>
      <tr>
        <td class="label">IVA (19%):</td>
        <td class="amount">{formatCLP(iva)}</td>
      </tr>
      <tr class="total-row">
        <td class="label">TOTAL:</td>
        <td class="amount">{formatCLP(total)}</td>
      </tr>
    </table>
  </div>

  <!-- Reserve Section -->
  <div class="reserve-section">
    <h3>Reserva (25%)</h3>
    <p><strong>Monto de Reserva:</strong> {formatCLP(reserve)}</p>
    <p>Para confirmar la reserva de los equipos, se requiere el pago del 25% del valor total del arriendo.</p>
    <p><strong>Método de Pago:</strong> {paymentMethod}</p>
    <p><strong>Saldo Pendiente:</strong> {formatCLP(total - reserve)}</p>
    {shippingInfo && (
      <div class="shipping-summary">
        <p><strong>Información de Entrega:</strong> {shippingInfo.method_title}</p>
        {shippingInfo.estimated_delivery && (
          <p><strong>Tiempo Estimado:</strong> {shippingInfo.estimated_delivery}</p>
        )}
      </div>
    )}
  </div>

  <!-- Terms and Conditions -->
  <div class="terms-section">
    <h3>Condiciones de Arrendamiento</h3>
    
    <h3>General</h3>
    <p>Los precios están expresados en pesos chilenos y no incluyen IVA. La vigencia de este presupuesto es de 15 días desde su emisión.</p>
    
    <h3>Condiciones de Pago</h3>
    <ul>
      <li>25% de reserva para confirmar el pedido</li>
      <li>75% restante contra entrega de equipos</li>
      <li>Formas de pago: Transferencia bancaria, efectivo o tarjeta de crédito/débito</li>
    </ul>
    
    <h3>Entrega y Retiro</h3>
    <ul>
      <li>Los equipos se entregan y retiran en horario comercial (Lunes a Viernes 9:00 a 18:00 hrs)</li>
      {shippingInfo && shippingInfo.delivery_method === 'pickup' && (
        <li><strong>Retiro en Tienda:</strong> Los equipos deben ser retirados en nuestras instalaciones</li>
      )}
      {shippingInfo && shippingInfo.delivery_method === 'shipping' && (
        <li><strong>Envío a Domicilio:</strong> Los equipos serán enviados a la dirección especificada</li>
      )}
      {shippingInfo && shippingInfo.estimated_delivery && (
        <li><strong>Tiempo de Entrega:</strong> {shippingInfo.estimated_delivery}</li>
      )}
      <li>Los equipos deben ser devueltos en las mismas condiciones en que fueron entregados</li>
      <li>Cualquier daño o pérdida será cobrado según lista de precios vigente</li>
    </ul>
    
    <h3>Responsabilidades</h3>
    <ul>
      <li>El arrendatario es responsable del cuidado y buen uso de los equipos</li>
      <li>Rental Mhans no se hace responsable por daños a terceros durante el uso de los equipos</li>
      <li>Se requiere cédula de identidad vigente para el retiro de equipos</li>
    </ul>
    
    <h3>Cancelaciones</h3>
    <p>Las cancelaciones deben realizarse con al menos 48 horas de anticipación. En caso contrario, se cobrará el 50% del valor total del arriendo.</p>
  </div>

  <!-- Footer -->
  <div class="company-footer">
    <div>
      <img src="https://clients-rental-mhans.vercel.app/logo.png" alt="Rental Mhans" class="logo-footer">
    </div>
    <div class="contact-info">
      <p><strong>RENTAL MHANS</strong></p>
      <p>Teléfono: +56 9 XXXX XXXX</p>
      <p>Email: contacto@rentalmhans.cl</p>
      <p>www.rentalmhans.cl</p>
    </div>
  </div>

  <div class="footer-info">
    <p>Este presupuesto fue generado automáticamente el {currentDate}</p>
  </div>
</body>
</html>
