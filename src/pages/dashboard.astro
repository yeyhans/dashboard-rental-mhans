--- 
import Base from "../layout/Base.astro";
import { getServerAdmin, clearAuthCookies } from "../lib/supabase";
import { DashboardService } from "../services/dashboardService";
import DashboardContainer from "../components/DashboardContainer";

export const prerender = false;

// Verificaci√≥n de autenticaci√≥n y admin usando el nuevo sistema
const adminSession = await getServerAdmin(Astro);

if (!adminSession) {
  console.log('üö´ Acceso denegado al dashboard - Usuario no es administrador');
  clearAuthCookies(Astro);
  return Astro.redirect("/");
}

console.log('‚úÖ Admin autenticado en dashboard:', adminSession.admin.email);

// Cargar datos del dashboard con manejo de errores mejorado
let dashboardStats;
try {
  console.log('üìä Cargando estad√≠sticas del dashboard...');
  dashboardStats = await DashboardService.getDashboardStats();
  
  console.log('‚úÖ Dashboard Stats cargadas:', {
    adminUser: adminSession.admin.email,
    monthlyOrders: dashboardStats.monthlyOrderStats.totalOrders,
    rentedEquipment: dashboardStats.rentedEquipment.length,
    totalSales: dashboardStats.financialSummary.totalSales,
    sessionType: adminSession.isExtended ? 'Extendida (30 d√≠as)' : 'Regular'
  });
} catch (error) {
  console.error('‚ùå Error cargando dashboard stats:', error);
  // Estructura de datos vac√≠a para evitar errores de renderizado
  dashboardStats = {
    monthlyOrderStats: {
      totalOrders: 0,
      completedOrders: 0,
      createdOrders: 0,
      pendingOrders: 0,
      processingOrders: 0,
      onHoldOrders: 0
    },
    ordersByStatus: {
      onHold: [],
      pending: [],
      processing: [],
      completed: []
    },
    rentedEquipment: [],
    financialSummary: {
      totalSales: 0,
      totalPaid: 0,
      totalPending: 0,
      reservationPayments: 0,
      finalPayments: 0
    }
  };
}

// Datos adicionales para el dashboard (se pasar√°n al componente)
const dashboardContext = {
  adminUser: {
    email: adminSession.admin.email,
    role: adminSession.admin.role,
    id: adminSession.admin.id
  },
  session: {
    isExtended: adminSession.isExtended,
    expiresAt: adminSession.expiresAt.toLocaleDateString('es-ES'),
    userId: adminSession.user.id
  }
};

const title = `Dashboard - Rental Mario Hans | ${adminSession.admin.email}`;
---

<Base title={title}>
  <div class="container py-3 px-2 sm:px-4">
    <!-- Dashboard Header -->
    <div class="mb-3 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
      <div>
        <h1 class="text-xl font-bold">Dashboard</h1>
        <p class="text-xs text-muted-foreground">Bienvenido al panel de control de Rental Mario Hans</p>
      </div>
      <div class="flex gap-2">
        <a 
          href="/analytics" 
          class="inline-flex items-center gap-2 px-3 py-2 text-xs font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
          </svg>
          Analytics Avanzados
        </a>
      </div>
    </div>
    
    <!-- Dashboard Integrado con Filtros -->
    <DashboardContainer 
      client:load
      initialData={dashboardStats}
      adminContext={dashboardContext}
    />

  </div>
</Base>
