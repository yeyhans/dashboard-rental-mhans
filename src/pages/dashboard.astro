--- 
import Base from "../layout/Base.astro";
import { supabase } from "../lib/supabase";
import OrderSummaryCards from "../components/OrderSummaryCards";
import OrderStatsOverview from "../components/OrderStatsOverview";
import { Separator } from "../components/ui/separator";
import OrderStatsEquip from "../components/OrderStatsEquip";

export const prerender = false;

// Get session from Supabase
if (!supabase) {
  console.error('Supabase client is not initialized. Check environment variables.');
  return Astro.redirect("/");
}

const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect("/");
}

// Verify the user is an admin from the 'admin_users' table
const { data: adminUser, error: adminError } = await supabase
  .from('admin_users')
  .select('*')
  .eq('user_id', session.user.id)
  .eq('role', 'admin')
  .single();

if (adminError || !adminUser) {
  console.error('Admin verification failed:', adminError?.message);
  // Clear cookies and redirect to login if not an admin
  Astro.cookies.delete('sb-access-token', { path: '/' });
  Astro.cookies.delete('sb-refresh-token', { path: '/' });
  return Astro.redirect("/");
}

// Initialize default data structure
let dashboardData = {
  orders: [],
  users: [],
  products: [],
  coupons: [],
  stats: {
    totalOrders: 0,
    totalRevenue: 0,
    totalUsers: 0,
    totalProducts: 0
  }
};

try {
  // Fetch comprehensive dashboard data from the new API
  const dashboardResponse = await fetch(`${Astro.url.origin}/api/dashboard`, {
    headers: {
      'Content-Type': 'application/json'
    }
  });

  if (dashboardResponse.ok) {
    const dashboardResult = await dashboardResponse.json();
    if (dashboardResult.success && dashboardResult.data) {
      dashboardData = {
        orders: [], // API doesn't return order list, only stats
        users: [], // API doesn't return user list, only stats
        products: [], // API doesn't return product list, only stats
        coupons: [], // API doesn't return coupon list, only stats
        stats: {
          totalOrders: dashboardResult.data.orders?.total || 0,
          totalRevenue: parseFloat(dashboardResult.data.overview?.totalRevenue || '0'),
          totalUsers: dashboardResult.data.users?.total || 0,
          totalProducts: dashboardResult.data.products?.total || 0
        }
      };
    }
  } else {
    console.error('Dashboard API error:', dashboardResponse.status, dashboardResponse.statusText);
  }
} catch (error) {
  console.error('Error fetching dashboard data:', error);
}

console.log('Dashboard Data:', dashboardData);
console.log('Authenticated admin user:', adminUser);

const title = "Dashboard - Rental Mhans";
---

<Base title={title}>
  <div class="container py-3 px-2 sm:px-4">
    <!-- Dashboard Header -->
    <div class="mb-3">
      <h1 class="text-xl font-bold">Dashboard</h1>
      <p class="text-xs text-muted-foreground">Bienvenido al panel de control de Rental Mhans</p>
    </div>
    
    <!-- Order Stats Overview Component -->
    <OrderStatsOverview 
      client:load 
      orders={dashboardData.orders} 
      totalOrders={dashboardData.stats.totalOrders.toString()} 
    />

    <Separator />
    
    <!-- Order Summary Cards Component -->
    <OrderSummaryCards 
      client:load
      orders={dashboardData.orders}
      totalOrders={dashboardData.stats.totalOrders.toString()}
      users={dashboardData.users}
    />

    <Separator />

    <OrderStatsEquip 
      client:load
      orders={dashboardData.orders}
      totalOrders={dashboardData.stats.totalOrders.toString()}
    />
    
    <!-- Revenue Chart Component -->
    <div class="my-3">

    </div>

  </div>
</Base>
