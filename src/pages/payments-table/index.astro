---
import Base from "../../layout/Base.astro";
import PaymentsTable from "../../components/payments/PaymentsTable";
import { supabase } from "../../lib/supabase";
export const prerender = false;

const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect("/");
}

// Get URL parameters for initial load
const url = new URL(Astro.request.url);
const status = url.searchParams.get('status') || '';

// Build query parameters - Load all results initially
const params = new URLSearchParams({
  page: '1',
  per_page: '1000' // Load a large number to get all results
});

if (status) {
  params.append('status', status);
}

// Fetch orders data from both APIs
const response = await fetch(`${Astro.url.origin}/api/woo/get-orders?${params}`);
const response2 = await fetch(`${Astro.url.origin}/api/wp/get-orders?${params}`);
const ordersData = await response.json();
const ordersData2 = await response2.json();

// Verificar que ordersData tenga la estructura correcta
if (!ordersData.data?.orders) {
  ordersData.data = {
    orders: [],
    total: "0",
    totalPages: "0"
  };
}

// Verificar que ordersData2 tenga la estructura correcta
if (!ordersData2.data?.orders) {
  ordersData2.data = { orders: [] };
}

// Merge WooCommerce orders with WordPress data
const mergedOrders = ordersData.data.orders.map((wooOrder: any) => {
  const wpOrder = ordersData2.data.orders?.find((order: any) => order.id === wooOrder.id);
  return {
    ...wooOrder,
    fotos_garantia: wpOrder?.fotos_garantia || [],
    correo_enviado: wpOrder?.correo_enviado || false,
    pago_completo: wpOrder?.pago_completo || 'false',
    orden_compra: wpOrder?.orden_compra || '',
    numero_factura: wpOrder?.numero_factura || ''
  };
});

const title = "Tabla de Pagos";
---

<Base title={title}>
  <div class="container py-6">
    <PaymentsTable 
      client:load
      initialOrders={mergedOrders}
      initialTotal={ordersData.data.total}
      initialStatus={status}
    />
  </div>
</Base> 