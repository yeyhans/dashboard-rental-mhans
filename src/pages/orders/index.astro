---
import Base from "../../layout/Base.astro";
import OrdersDashboard from "../../components/orders/OrdersDashboard";
import { supabase } from "../../lib/supabase";
export const prerender = false;

const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect("/");
}

// Preparar datos de sesión para el cliente
const sessionData = {
  access_token: session.access_token,
  user: session.user
};

// Get URL parameters for initial load
const url = new URL(Astro.request.url);
const page = url.searchParams.get('page') || '1';
const per_page = url.searchParams.get('per_page') || '10';
const status = url.searchParams.get('status') || '';
const search = url.searchParams.get('search') || '';

// Build query parameters for the new API
const params = new URLSearchParams({
  page,
  limit: per_page
});

if (status) {
  params.append('status', status);
}

if (search) {
  params.append('search', search);
}

// Initialize default data structure
let ordersData = {
  data: {
    orders: [],
    total: 0,
    totalPages: 1,
    currentPage: 1
  }
};

try {
  // Fetch orders data from the new professional API
  const response = await fetch(`${Astro.url.origin}/api/orders?${params}`, {
    headers: {
      'Authorization': `Bearer ${session.access_token}`,
      'Content-Type': 'application/json'
    }
  });

  if (response.ok) {
    const result = await response.json();
    if (result.success && result.data) {
      // Transform orders to match expected structure
      const transformedOrders = result.data.orders.map((order: any) => {
        return {
          ...order,
          // Create metadata object from direct properties for backward compatibility
          metadata: {
            order_proyecto: order.order_proyecto || '',
            order_fecha_inicio: order.order_fecha_inicio || '',
            order_fecha_termino: order.order_fecha_termino || '',
            num_jornadas: order.num_jornadas || '',
            calculated_subtotal: order.calculated_subtotal || '0',
            calculated_discount: order.calculated_discount || '0',
            calculated_iva: order.calculated_iva || '0',
            calculated_total: order.calculated_total || '0',
            company_rut: order.company_rut || '',
            pdf_on_hold_url: order.pdf_on_hold_url || '',
            pdf_processing_url: order.pdf_processing_url || '',
            order_retire_name: order.order_retire_name || '',
            order_retire_rut: order.order_retire_rut || '',
            order_retire_phone: order.order_retire_phone || '',
            order_comments: order.order_comments || ''
          },
          // Create billing object from direct properties
          billing: {
            first_name: order.billing_first_name || '',
            last_name: order.billing_last_name || '',
            company: order.billing_company || '',
            address_1: order.billing_address_1 || '',
            city: order.billing_city || '',
            email: order.billing_email || '',
            phone: order.billing_phone || ''
          },
          // Set default values for missing properties
          fotos_garantia: order.fotos_garantia || [],
          correo_enviado: order.correo_enviado || false,
          pago_completo: order.pago_completo ? 'true' : 'false'
        };
      });

      ordersData = {
        data: {
          orders: transformedOrders,
          total: result.data.total || 0,
          totalPages: result.data.totalPages || 1,
          currentPage: result.data.currentPage || 1
        }
      };
    }
  } else {
    console.error('Orders API error:', response.status, response.statusText);
  }
} catch (error) {
  console.error('Error fetching orders data:', error);
}

console.log('Orders Data:', ordersData);

const title = "Gestión de Órdenes";
---

<Base title={title}>
  <div class="container py-6">
    <OrdersDashboard 
      client:load
      initialOrders={ordersData.data.orders}
      initialTotal={ordersData.data.total.toString()}
      initialTotalPages={ordersData.data.totalPages.toString()}
      initialPage={page}
      initialStatus={status}
      initialPerPage={per_page}
      sessionData={sessionData}
    />
  </div>
</Base>
