---
import Base from "../../layout/Base.astro";
import ProcessOrder from "../../components/orders/ProcessOrder";
import { OrderService } from "../../services/orderService";
import { getServerAdmin, clearAuthCookies } from "../../lib/supabase";
import { ProductService } from "../../services/productService";
import { ShippingService } from "../../services/shippingService";

export const prerender = false;

// Verificar autenticaci√≥n usando el nuevo sistema
const adminSession = await getServerAdmin(Astro);

if (!adminSession) {
  console.log('üö´ Acceso denegado a order detail - Usuario no es administrador');
  clearAuthCookies(Astro);
  return Astro.redirect("/");
}

console.log('‚úÖ Admin autenticado en order detail:', adminSession.admin.email);

// Get the order ID from the URL parameter
const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/orders");
}

// Fetch the order data using the professional service
const order = await OrderService.getOrderById(parseInt(id, 10));

if (!order) {
  console.log(`üîí Access denied: Order ${id} not found`);
  return Astro.redirect("/orders");
}

// Los administradores pueden ver todas las √≥rdenes
console.log('‚úÖ Admin access granted for:', adminSession.admin.email, 'order:', order.id);

// Load all products for the product selector using direct service call
let allProducts: any[] = [];
try {
  console.log('üîÑ Loading all products for selector...');
  
  // Use ProductService directly instead of HTTP call to avoid auth issues
  const result = await ProductService.getAllProducts(1, 1000); // page=1, limit=1000
  
  if (result && result.products && Array.isArray(result.products)) {
    allProducts = result.products;
    console.log('‚úÖ Loaded products:', allProducts.length);
  } else {
    console.error('‚ùå ProductService returned invalid data:', result);
  }
} catch (error) {
  console.error('‚ùå Error loading products from ProductService:', error);
}

// Load shipping methods for ProcessOrder component
let allShippingMethods: any[] = [];
try {
  console.log('üîÑ Loading shipping methods for ProcessOrder...');
  
  // Use ShippingService directly to load enabled shipping methods
  const shippingResult = await ShippingService.getAllShippingMethods(1, 100, true); // Only enabled methods
  
  if (shippingResult && shippingResult.shippingMethods && Array.isArray(shippingResult.shippingMethods)) {
    allShippingMethods = shippingResult.shippingMethods;
    console.log('‚úÖ Loaded shipping methods from database:', allShippingMethods.length);
  } else {
    console.warn('‚ö†Ô∏è No shipping methods found in database');
  }
} catch (error) {
  console.error('‚ùå Error loading shipping methods from ShippingService:', error);
}


// Usar datos directos de la base de datos con compatibilidad m√≠nima
const orderData = {
  success: !!order,
  data: order ? {
    ...order, // Todas las columnas de la tabla orders est√°n disponibles directamente
    // Solo objetos de compatibilidad para componentes legacy
    billing: {
      first_name: order.billing_first_name,
      last_name: order.billing_last_name,
      company: order.billing_company,
      address_1: order.billing_address_1,
      city: order.billing_city,
      email: order.billing_email,
      phone: order.billing_phone
    },
    meta_data: [
      { key: 'order_proyecto', value: order.order_proyecto },
      { key: 'order_fecha_inicio', value: order.order_fecha_inicio },
      { key: 'order_fecha_termino', value: order.order_fecha_termino },
      { key: 'num_jornadas', value: order.num_jornadas?.toString() || '0' },
      { key: 'company_rut', value: order.company_rut },
      { key: 'calculated_subtotal', value: order.calculated_subtotal?.toString() || '0' },
      { key: 'calculated_discount', value: order.calculated_discount?.toString() || '0' },
      { key: 'calculated_iva', value: order.calculated_iva?.toString() || '0' },
      { key: 'calculated_total', value: order.calculated_total?.toString() || '0' },
      { key: 'order_retire_name', value: order.order_retire_name || '' },
      { key: 'order_retire_phone', value: order.order_retire_phone || '' },
      { key: 'order_retire_rut', value: order.order_retire_rut || '' },
      { key: 'order_comments', value: order.order_comments || '' },
      { key: '_pdf_on_hold_url', value: order.new_pdf_on_hold_url || '' },
    ]
  } : null,
  message: order ? '' : `No se encontr√≥ la orden con ID ${id}`
};

const title = `Procesar Orden #${id} | ${adminSession.admin.email}`;
---

<Base title={title}>
  <div class="container py-6">
    {orderData.success && orderData.data ? (


        <ProcessOrder
          client:load
          order={{
            orders: {
              success: true,
              orders: [{ 
                ...orderData.data,
                customer: {
                  id: orderData.data.customer_id,
                  email: orderData.data.billing_email,
                  first_name: orderData.data.billing_first_name,
                  last_name: orderData.data.billing_last_name
                }
              } as any]
            }
          }}
          sessionData={{
            access_token: 'admin-session',
            user: {
              id: adminSession.user.id,
              email: adminSession.admin.email,
              role: adminSession.admin.role
            },
            admin: adminSession.admin
          }}
          allProducts={allProducts}
          allShippingMethods={allShippingMethods}
        />
    ) : (
      <div class="p-4 bg-destructive/10 text-destructive rounded-md">
        <p>Error al cargar el pedido: {orderData.message}</p>
      </div>
    )}
  </div>
</Base>
