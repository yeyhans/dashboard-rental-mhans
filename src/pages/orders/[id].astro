---
import Base from "../../layout/Base.astro";
import ProcessOrder from "../../components/orders/ProcessOrder";
import { OrderService } from "../../services/orderService";
import { getServerUserProfile, supabase } from "../../lib/supabase";
import { AdminService } from "../../services/adminService";
import { ProductService } from "../../services/productService";

export const prerender = false;

// El usuario ya est√° autenticado por el middleware
const user = Astro.locals.user;

if (!user) {
  console.log('üîí Access denied: No authenticated user found in locals');
  return Astro.redirect("/");
}

// Get the Supabase session for API authentication
const { data: { session } } = await supabase.auth.getSession();
console.log('üîë Session data:', { hasSession: !!session, hasAccessToken: !!session?.access_token });

if (!session) {
  console.log('üîí No Supabase session found, redirecting to login');
  return Astro.redirect("/");
}

// Get the order ID from the URL parameter
const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/orders");
}

// Fetch the order data using the professional service
const order = await OrderService.getOrderById(parseInt(id, 10));

if (!order) {
  console.log(`üîí Access denied: Order ${id} not found`);
  return Astro.redirect("/orders");
}

// Verificar autorizaci√≥n - administradores pueden ver todas las √≥rdenes, usuarios solo las suyas
// Primero verificar si el usuario es administrador
const isAdmin = await AdminService.isAdmin(user.id);

if (isAdmin) {
  console.log('‚úÖ Admin access granted for user:', user.id, 'order:', order.id);
} else {
  // Si no es admin, verificar si es el propietario de la orden
  const userProfile = await getServerUserProfile(Astro);
  if (!userProfile?.profile) {
    console.log('üîí Access denied: No user profile found');
    return Astro.redirect("/");
  }

  // Verificar si el usuario puede acceder a esta orden
  const canAccess = 
    order.customer_id === userProfile.profile.user_id || // Numeric user_id
    order.billing_email === userProfile.profile.email || // Email match
    order.billing_email === user.email; // Session email match

  if (!canAccess) {
    console.log(`üîí Access denied: User ${user.id} cannot access order ${order.id} (customer_id: ${order.customer_id})`);
    return Astro.redirect("/orders");
  }
  
  console.log('‚úÖ Customer access granted for user:', user.id, 'order:', order.id);
}

// Load all products for the product selector using direct service call
let allProducts: any[] = [];
try {
  console.log('üîÑ Loading all products for selector...');
  
  // Use ProductService directly instead of HTTP call to avoid auth issues
  const result = await ProductService.getAllProducts(1, 1000); // page=1, limit=1000
  
  if (result && result.products && Array.isArray(result.products)) {
    allProducts = result.products;
    console.log('‚úÖ All products loaded successfully:', allProducts.length, 'products');
    
    // Log sample products for debugging
    if (allProducts.length > 0) {
      console.log('üì¶ Sample products:', allProducts.slice(0, 3).map(p => ({
        id: p.id,
        name: p.name,
        status: p.status,
        stock_status: p.stock_status,
        price: p.price
      })));
    }
  } else {
    console.error('‚ùå ProductService returned invalid data:', result);
  }
} catch (error) {
  console.error('‚ùå Error loading products from ProductService:', error);
}


// Usar datos directos de la base de datos con compatibilidad m√≠nima
const orderData = {
  success: !!order,
  data: order ? {
    ...order, // Todas las columnas de la tabla orders est√°n disponibles directamente
    // Solo objetos de compatibilidad para componentes legacy
    billing: {
      first_name: order.billing_first_name,
      last_name: order.billing_last_name,
      company: order.billing_company,
      address_1: order.billing_address_1,
      city: order.billing_city,
      email: order.billing_email,
      phone: order.billing_phone
    },
    meta_data: [
      { key: 'order_proyecto', value: order.order_proyecto },
      { key: 'order_fecha_inicio', value: order.order_fecha_inicio },
      { key: 'order_fecha_termino', value: order.order_fecha_termino },
      { key: 'num_jornadas', value: order.num_jornadas?.toString() || '0' },
      { key: 'company_rut', value: order.company_rut },
      { key: 'calculated_subtotal', value: order.calculated_subtotal?.toString() || '0' },
      { key: 'calculated_discount', value: order.calculated_discount?.toString() || '0' },
      { key: 'calculated_iva', value: order.calculated_iva?.toString() || '0' },
      { key: 'calculated_total', value: order.calculated_total?.toString() || '0' },
      { key: 'order_retire_name', value: order.order_retire_name || '' },
      { key: 'order_retire_phone', value: order.order_retire_phone || '' },
      { key: 'order_retire_rut', value: order.order_retire_rut || '' },
      { key: 'order_comments', value: order.order_comments || '' },
      { key: '_pdf_on_hold_url', value: order.new_pdf_on_hold_url || '' },
      { key: '_pdf_processing_url', value: order.new_pdf_processing_url || '' }
    ]
  } : null,
  message: order ? '' : `No se encontr√≥ la orden con ID ${id}`
};

const title = `Orden #${id}`;
---

<Base title={title}>
  <div class="container py-6">
    {orderData.success && orderData.data ? (
      <>


        <ProcessOrder
          client:load
          order={{
            orders: {
              success: true,
              orders: [{ 
                ...orderData.data,
                customer: {
                  id: orderData.data.customer_id,
                  email: orderData.data.billing_email,
                  first_name: orderData.data.billing_first_name,
                  last_name: orderData.data.billing_last_name
                }
              } as any]
            }
          }}
          sessionData={session}
          allProducts={allProducts}
        />
      </>
    ) : (
      <div class="p-4 bg-destructive/10 text-destructive rounded-md">
        <p>Error al cargar el pedido: {orderData.message}</p>
      </div>
    )}
  </div>
</Base>
